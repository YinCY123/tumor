---
title: "COLN Single Cell"
author: "YinCY"
format: html
editor: source
---


# COLON
```{r}
#| message: false
library(SingleCellExperiment)
library(DropletUtils)
library(fs)
library(data.table)
library(magrittr)
library(Matrix)
library(stringr)
```


### GSE132257
```{r}
mtx <- fread("coln/GSE132257/GSE132257_GEO_processed_protocol_and_fresh_frozen_raw_UMI_count_matrix.txt.gz", 
             sep = "\t", 
             header = TRUE, 
             check.names = FALSE) %>% 
  as.data.frame()
source("/home/yincy/git/mouse-kidney/functions/idconv.R")
mtx$id <- idconv(from_id = mtx$Index, from_type = "SYMBOL", to_type =  "GENEID", db = "human")
mtx <- mtx %>% dplyr::relocate(id, .before = Index)
mtx %>% dim
idx <- is.na(mtx$id)
idx %>% table
mtx <- mtx[!idx, ]
mtx %>% dim
duplicated(mtx$id) %>% table
rownames(mtx) <- mtx$id
mtx <- mtx[, -c(1, 2)]
colnames(mtx) <- str_replace_all(colnames(mtx), "\\.", "-")
mtx[1:10, 1:10]
mtx <- as(as.matrix(mtx), "CsparseMatrix")

sample_info <- read.table("coln/GSE132257/GSE132257_processed_protocol_and_fresh_frozen_cell_annotation.txt.gz", 
                          sep = "\t", 
                          header = TRUE) %>% 
  dplyr::filter(Index %in% colnames(mtx)) %>% 
  tibble::column_to_rownames("Index")
gene_info <- data.frame(ensembl = rownames(mtx), 
                        symbol = idconv(rownames(mtx), from_type = "GENEID", to_type = "SYMBOL", db = "human"))
gene_info

sces <- SingleCellExperiment(assays = list(counts = mtx), 
                             colData = sample_info, 
                             rowData = gene_info)
sces
sces %>% colData
sces %>% rowData
saveRDS(sces, "coln/GSE132257.rds")
```

### GSE132465
```{r}
mtx <- fread("coln/GSE132465/GSE132465_GEO_processed_CRC_10X_raw_UMI_count_matrix.txt.gz", 
             sep = "\t", 
             header = T) %>% 
  as.data.frame()

mtx %>% dim
mtx[1:10, 1:10]

source("/home/yincy/git/mouse-kidney/functions/idconv.R")
mtx$id <- idconv(mtx$Index, from_type = "SYMBOL", to_type = "GENEID", db = "human")
mtx <- dplyr::relocate(mtx, id, .before = "Index")
is.na(mtx$id) %>% table

mtx <- mtx %>% dplyr::filter(!is.na(mtx$id))
duplicated(mtx$id) %>% table
rownames(mtx) <- mtx$id
mtx <- mtx[, -c(1, 2)]
mtx <- as(as.matrix(mtx), "CsparseMatrix")
mtx %>% dim
sample_info <- read.table("coln/GSE132465/GSE132465_GEO_processed_CRC_10X_cell_annotation.txt.gz", 
                          sep = "\t", 
                          header = TRUE) %>% 
  dplyr::filter(Index %in% colnames(mtx)) %>% 
  tibble::column_to_rownames("Index")
saveRDS(sample_info, "coln/sample_info_GSE132465.rds")


# filter out normal sample
idx <- (sample_info$Class == "Tumor") & grepl("-T$", sample_info$Sample)
idx %>% table
sample_info <- sample_info[idx, ]
sample_info %>% dim
sample_info %>% head
mtx <- mtx[, rownames(sample_info)]
identical(rownames(sample_info), colnames(mtx))

gene_info <- data.frame(ensembl = rownames(mtx), 
                        symbol = idconv(rownames(mtx), "GENEID", "SYMBOL", "human"))
gene_info %>% head

sces <- SingleCellExperiment(assays = list(counts = mtx), 
                             rowData = gene_info, 
                             colData = sample_info)
sces
sces %>% rowData
sces %>% colData
saveRDS(sces, "coln/GSE132465.rds")
```


### GSE144735
```{r}
mtx <- fread("coln/GSE144735/GSE144735_processed_KUL3_CRC_10X_raw_UMI_count_matrix.txt.gz", 
             sep = "\t", 
             header = TRUE) %>% 
  as.data.frame()
mtx$ensembl <- idconv(mtx$Index, "SYMBOL", "GENEID", "human")
mtx <- dplyr::relocate(mtx, ensembl, .before = "Index")
is.na(mtx$ensembl) %>% table
mtx <- mtx %>% dplyr::filter(!is.na(ensembl))
mtx$ensembl %>% duplicated() %>% table
rownames(mtx) <- mtx$ensembl
mtx <- mtx[, -c(1, 2)]
mtx[1:10, 1:10]

sample_info <- read.table("coln/GSE144735/GSE144735_processed_KUL3_CRC_10X_annotation.txt.gz", 
                          sep = "\t", 
                          header = TRUE) %>% 
  dplyr::filter(Index %in% colnames(mtx)) %>% 
  tibble::column_to_rownames("Index")
sample_info %>% dim
sample_info %>% head

gene_info <- data.frame(ensembl = rownames(mtx), 
                        symbol = idconv(rownames(mtx), "GENEID", "SYMBOL", "human"))
gene_info %>% head

sces <- SingleCellExperiment(assays = list(counts = as(as.matrix(mtx), "CsparseMatrix")), 
                             rowData = gene_info, 
                             colData = sample_info)

sces
sces %>% rowData
sces %>% colData
saveRDS(sces, "coln/GSE144735.rds")
```


# analysis
```{r}
#| message: false
#| warning: false

library(SingleCellExperiment)
library(scran)
library(scater)
library(magrittr)
library(ggplot2)
library(bluster)
library(batchelor)
```


```{r}
GSE132465 <- readRDS("coln/GSE132465.rds")
GSE132465
GSE132465 %>% colData()
sample_info <- colData(GSE132465) %>% as.data.frame()
table(GSE132465$Patient, GSE132465$Cell_subtype)
```


```{r}
# cell qc
is_mito <- grepl("^MT-", rowData(GSE132465)$symbol)
is_mito %>% table
rowData(GSE132465)$symbol[is_mito]

colData(GSE132465)$mito_percent <- round(colSums(assay(GSE132465, "counts")[is_mito, ]) /colSums(assay(GSE132465, "counts")), 4) * 100

stats <- perCellQCMetrics(x = GSE132465, subsets = list(mito = is_mito))
qc_sum <- isOutlier(stats$sum, 
                    type = "higher", 
                    log = TRUE, 
                    batch = GSE132465$Patient)
qc_sum %>% table

qc_detected <- isOutlier(stats$detected, 
                         type = "both", 
                         log = TRUE, 
                         batch = GSE132465$Patient)
qc_detected %>% table

qc_mito <- isOutlier(stats$subsets_mito_percent, 
                     type = "higher", 
                     log = TRUE, 
                     batch = GSE132465$Patient)
qc_mito %>% table

qc <- qc_sum | qc_detected | qc_mito
qc %>% table

GSE132465 <- GSE132465[, !qc]
```


```{r}
# gene qc
stats <- perFeatureQCMetrics(GSE132465)
stats

qc <- stats$detected > 0
qc %>% table

GSE132465 <- GSE132465[qc, ]
```


```{r}
set.seed(101)
qclusters <- quickCluster(GSE132465, min.size = 50, use.ranks = TRUE, method = "igraph")
qclusters %>% table

GSE132465 <- computePooledFactors(GSE132465, 
                                  clusters = qclusters, 
                                  BPPARAM = BiocParallel::MulticoreParam(workers = 12))
GSE132465 <- multiBatchNorm(GSE132465, batch = GSE132465$Patient)

dec <- modelGeneVar(GSE132465, 
                    block = GSE132465$Patient)

hvgs <- getTopHVGs(dec, var.threshold = 0)
hvgs %>% str
```


```{r}
set.seed(102)
sce <- GSE132465
sce <- batchCorrect(sce, 
                    batch = sce$Patient, 
                    subset.row = hvgs, 
                    correct.all = TRUE, 
                    PARAM = FastMnnParam(k = 15, d = 50, auto.merge = TRUE))

reducedDim(GSE132465, "corrected") <- reducedDim(sce, "corrected")
assay(GSE132465, "reconstructed") <- assay(sce, "reconstructed")
rm(sce);gc()
```


```{r}
set.seed(103)
clusters <- clusterRows(reducedDim(GSE132465, "corrected"), 
                        BLUSPARAM = NNGraphParam(cluster.fun = "louvain", cluster.args = list(resolution = 4)))
clusters %>% table
table(clusters, GSE132465$Patient)
GSE132465$clusters <- factor(clusters)

set.seed(104)
GSE132465 <- runTSNE(GSE132465, 
                     dimred = "corrected", 
                     assay.type = "reconstructed")

# GSE132465 <- runUMAP(GSE132465, 
#                      dimred = "corrected", 
#                      assay.type = "reconstructed")
```


```{r}
library(magrittr)

table(GSE132465$clusters, GSE132465$Cell_subtype) %>% prop.table(margin = 1) %>% round(digits = 2) %>% tail(10)
```

```{r}
cell_type <- c(
  "1" = "CMS2", 
  "2" = "CMS2", 
  "3" = "CMS2", 
  "4" = "CMS2",
  "5" = "CMS2", 
  "6" = "CMS2", 
  "7" = "CMS3", 
  "8" = "CMS2", 
  "9" = "CMS3", 
  "10" = "CMS2", 
  "11" = "CMS2", 
  "12" = "CMS3", 
  "13" = "CMS2", 
  "14" = "Pro-inflammatory", 
  "15" = "SPP1+", 
  "16" = "IgG+ Plasma", 
  "17" = "SPP1+", 
  "18" = "IgG+ Plasma", 
  "19" = "CD19+CD20+ B Cells", 
  "20" = "Myofibroblasts", 
  "21" = "ECs", 
  "22" = "Pericytes", 
  "23" = "IgG+ Plasma", 
  "24" = "Pro-inflammatory", 
  "25" = "Unknown", 
  "26" = "cDC", 
  "27" = "Pro-inflammatory", 
  "28" = "Pro-inflammatory", 
  "29" = "CD4+ T cells", 
  "30" = "Regulatory T cells", 
  "31" = "CD4+ T cells", 
  "32" = "CD8+ T cells", 
  "33" = "CD4+ T cells", 
  "34" = "CD4+ T cells", 
  "35" = "Regulatory T cells", 
  "36" = "CD8+ T cells", 
  "37" = "NK cells", 
  "38" = "Unknown", 
  "39" = "CD8+ T cells", 
  "40" = "T helper 17 cells",
  "41" = "IgG+ Plasma"
)

colData(GSE132465)$cell_type <- cell_type[GSE132465$clusters]
saveRDS(GSE132465, "coln/processed_GSE132465.rds")
```

# energy stress 
```{r}
#| message: false
#| warning: false

library(scater)
library(scuttle)
library(tidyverse)
library(EnsDb.Hsapiens.v86)

GSE132465 <- readRDS("coln/processed_GSE132465.rds")
signature_genes <- readRDS("coln/top15_up_genes.rds")
table(signature_genes %in% rownames(GSE132465))
sig_df <- data.frame(ensembl = signature_genes, 
                     symbol = mapIds(EnsDb.Hsapiens.v86, keys = signature_genes, keytype = "GENEID", column = "SYMBOL"), 
                     in_COLON = (signature_genes %in% rownames(GSE132465)))
sig_df
```


```{r}
df <- makePerCellDF(GSE132465, 
                    features = signature_genes, 
                    use.dimred = F, 
                    use.altexps = F) %>% 
  rownames_to_column("barcodes")
df <- df %>% dplyr::select(-starts_with("corrected"))

df <- df %>% pivot_longer(cols = starts_with("ENSG"), 
                    names_to = "ensembl", 
                    values_to = "logcounts")

df <- df %>% 
  group_by(barcodes, cell_type) %>% 
  summarise(sum = sum(logcounts), 
            q75 = quantile(logcounts, probs = 0.75))

m <- setNames(df$sum, df$barcodes)
q75 <- setNames(df$q75, df$barcodes)

colData(GSE132465)$sum <- m[rownames(colData(GSE132465))]
colData(GSE132465)$q75 <- q75[rownames(colData(GSE132465))]
GSE132465 %>% colData

cords <- reducedDim(GSE132465, "TSNE") %>% as.data.frame() %>% rownames_to_column("barcodes")
coldata <- colData(GSE132465) %>% as.data.frame() %>% rownames_to_column("barcodes")

df_to_plot <- left_join(coldata, cords, by = "barcodes")
```



```{r}
cell_location <- df_to_plot %>% group_by(cell_type) %>% summarise(x = mean(TSNE1), y = mean(TSNE2))

df_to_plot %>% 
  ggplot(aes(TSNE1, TSNE2)) +
  geom_point(aes(color = cell_type), size = 1, stroke = 0.2) +
  # geom_density_2d(linewidth = 0.2) +
  geom_text(aes(x, y, label = cell_type), data = cell_location, size = 2.5, color = "red") +
  viridis::scale_color_viridis("cell types", discrete = T, option = "D") +
  theme_classic()

ggsave("res/colon/energy_stress_cell_types.tiff", width = 9)
```




